/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace Sandboxes {
    interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Sandboxes {
    constructor(protected readonly _options: Sandboxes.Options) {}

    /**
     * Upserts a new scenario for a sandbox, keying off of the optionally provided scenario id.
     *
     * If an id is provided and has a match, the scenario will be updated. If no id is provided or no match
     * is found, a new scenario will be appended to the end.
     *
     * Note that a full replacement of the scenario is performed, so any fields not provided will be removed
     * or overwritten with default values.
     *
     * @example
     *     await vellum.sandboxes.upsertSandboxScenario("string", {
     *         inputs: [{
     *                 key: "string",
     *                 type: Vellum.ScenarioInputTypeEnum.Text,
     *                 chatHistory: [{
     *                         role: Vellum.ChatMessageRole.System
     *                     }]
     *             }],
     *         metricInputParams: {
     *             params: {}
     *         }
     *     })
     */
    public async upsertSandboxScenario(
        id: string,
        request: Vellum.UpsertSandboxScenarioRequestRequest,
        requestOptions?: Sandboxes.RequestOptions
    ): Promise<Vellum.SandboxScenario> {
        const _response = await core.fetcher({
            url: urlJoin(
                ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                    .default,
                `v1/sandboxes/${id}/scenarios`
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "v0.2.2",
            },
            contentType: "application/json",
            body: await serializers.UpsertSandboxScenarioRequestRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.SandboxScenario.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes an existing scenario from a sandbox, keying off of the provided scenario id.
     *
     * @example
     *     await vellum.sandboxes.deleteSandboxScenario("string", "string")
     */
    public async deleteSandboxScenario(
        id: string,
        scenarioId: string,
        requestOptions?: Sandboxes.RequestOptions
    ): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                    .default,
                `v1/sandboxes/${id}/scenarios/${scenarioId}`
            ),
            method: "DELETE",
            headers: {
                X_API_KEY: await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "v0.2.2",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
