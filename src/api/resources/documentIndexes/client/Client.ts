/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as errors from "../../../../errors";

export declare namespace DocumentIndexes {
    interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class DocumentIndexes {
    constructor(protected readonly _options: DocumentIndexes.Options) {}

    /**
     * Creates a new document index.
     *
     * @example
     *     await vellum.documentIndexes.create({
     *         label: "My Document Index",
     *         name: "my-document-index",
     *         status: Vellum.EntityStatus.Active,
     *         environment: Vellum.EnvironmentEnum.Development,
     *         indexingConfig: {
     *             "chunking": {
     *                 "chunker_name": "sentence-chunker",
     *                 "chunker_config": {
     *                     "character_limit": 1000,
     *                     "min_overlap_ratio": 0.5
     *                 }
     *             },
     *             "vectorizer": {
     *                 "model_name": "hkunlp/instructor-xl",
     *                 "config": {
     *                     "instruction_domain": "",
     *                     "instruction_document_text_type": "plain_text",
     *                     "instruction_query_text_type": "plain_text"
     *                 }
     *             }
     *         }
     *     })
     */
    public async create(
        request: Vellum.DocumentIndexCreateRequest,
        requestOptions?: DocumentIndexes.RequestOptions
    ): Promise<Vellum.DocumentIndexRead> {
        const _response = await core.fetcher({
            url: urlJoin(
                ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                    .default,
                "v1/document-indexes"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "0.3.4",
            },
            contentType: "application/json",
            body: await serializers.DocumentIndexCreateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.DocumentIndexRead.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Used to retrieve a Document Index given its ID or name.
     *
     * @example
     *     await vellum.documentIndexes.retrieve("string")
     */
    public async retrieve(
        id: string,
        requestOptions?: DocumentIndexes.RequestOptions
    ): Promise<Vellum.DocumentIndexRead> {
        const _response = await core.fetcher({
            url: urlJoin(
                ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                    .default,
                `v1/document-indexes/${id}`
            ),
            method: "GET",
            headers: {
                X_API_KEY: await core.Supplier.get(this._options.apiKey),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "0.3.4",
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.DocumentIndexRead.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
