/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { PromptBlockState } from "./PromptBlockState";
import { EphemeralPromptCacheConfigRequest } from "./EphemeralPromptCacheConfigRequest";
import { JinjaPromptBlockPropertiesRequest } from "./JinjaPromptBlockPropertiesRequest";

export const JinjaPromptBlockRequest: core.serialization.ObjectSchema<
    serializers.JinjaPromptBlockRequest.Raw,
    Vellum.JinjaPromptBlockRequest
> = core.serialization.object({
    state: PromptBlockState.optional(),
    cacheConfig: core.serialization.property("cache_config", EphemeralPromptCacheConfigRequest.optional()),
    blockType: core.serialization.property("block_type", core.serialization.stringLiteral("JINJA")),
    properties: JinjaPromptBlockPropertiesRequest,
});

export declare namespace JinjaPromptBlockRequest {
    interface Raw {
        state?: PromptBlockState.Raw | null;
        cache_config?: EphemeralPromptCacheConfigRequest.Raw | null;
        block_type: "JINJA";
        properties: JinjaPromptBlockPropertiesRequest.Raw;
    }
}
