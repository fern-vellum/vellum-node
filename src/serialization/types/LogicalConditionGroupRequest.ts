/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { ConditionCombinator } from "./ConditionCombinator";

export const LogicalConditionGroupRequest: core.serialization.ObjectSchema<
    serializers.LogicalConditionGroupRequest.Raw,
    Vellum.LogicalConditionGroupRequest
> = core.serialization.object({
    type: core.serialization.stringLiteral("LOGICAL_CONDITION_GROUP"),
    conditions: core.serialization.list(core.serialization.lazy(() => serializers.LogicalExpressionRequest)),
    combinator: ConditionCombinator,
    negated: core.serialization.boolean(),
});

export declare namespace LogicalConditionGroupRequest {
    interface Raw {
        type: "LOGICAL_CONDITION_GROUP";
        conditions: serializers.LogicalExpressionRequest.Raw[];
        combinator: ConditionCombinator.Raw;
        negated: boolean;
    }
}
