/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const WorkflowNodeResultEvent: core.serialization.Schema<
    serializers.WorkflowNodeResultEvent.Raw,
    Vellum.WorkflowNodeResultEvent
> = core.serialization
    .union("state", {
        INITIATED: core.serialization.lazyObject(async () => (await import("..")).InitiatedWorkflowNodeResultEvent),
        STREAMING: core.serialization.lazyObject(async () => (await import("..")).StreamingWorkflowNodeResultEvent),
        FULFILLED: core.serialization.lazyObject(async () => (await import("..")).FulfilledWorkflowNodeResultEvent),
        REJECTED: core.serialization.lazyObject(async () => (await import("..")).RejectedWorkflowNodeResultEvent),
    })
    .transform<Vellum.WorkflowNodeResultEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowNodeResultEvent {
    type Raw =
        | WorkflowNodeResultEvent.Initiated
        | WorkflowNodeResultEvent.Streaming
        | WorkflowNodeResultEvent.Fulfilled
        | WorkflowNodeResultEvent.Rejected;

    interface Initiated extends serializers.InitiatedWorkflowNodeResultEvent.Raw {
        state: "INITIATED";
    }

    interface Streaming extends serializers.StreamingWorkflowNodeResultEvent.Raw {
        state: "STREAMING";
    }

    interface Fulfilled extends serializers.FulfilledWorkflowNodeResultEvent.Raw {
        state: "FULFILLED";
    }

    interface Rejected extends serializers.RejectedWorkflowNodeResultEvent.Raw {
        state: "REJECTED";
    }
}
