/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { InitiatedWorkflowNodeResultEvent } from "./InitiatedWorkflowNodeResultEvent";
import { StreamingWorkflowNodeResultEvent } from "./StreamingWorkflowNodeResultEvent";
import { FulfilledWorkflowNodeResultEvent } from "./FulfilledWorkflowNodeResultEvent";
import { RejectedWorkflowNodeResultEvent } from "./RejectedWorkflowNodeResultEvent";

export const WorkflowNodeResultEvent: core.serialization.Schema<
    serializers.WorkflowNodeResultEvent.Raw,
    Vellum.WorkflowNodeResultEvent
> = core.serialization
    .union("state", {
        INITIATED: InitiatedWorkflowNodeResultEvent,
        STREAMING: StreamingWorkflowNodeResultEvent,
        FULFILLED: FulfilledWorkflowNodeResultEvent,
        REJECTED: RejectedWorkflowNodeResultEvent,
    })
    .transform<Vellum.WorkflowNodeResultEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowNodeResultEvent {
    type Raw =
        | WorkflowNodeResultEvent.Initiated
        | WorkflowNodeResultEvent.Streaming
        | WorkflowNodeResultEvent.Fulfilled
        | WorkflowNodeResultEvent.Rejected;

    interface Initiated extends InitiatedWorkflowNodeResultEvent.Raw {
        state: "INITIATED";
    }

    interface Streaming extends StreamingWorkflowNodeResultEvent.Raw {
        state: "STREAMING";
    }

    interface Fulfilled extends FulfilledWorkflowNodeResultEvent.Raw {
        state: "FULFILLED";
    }

    interface Rejected extends RejectedWorkflowNodeResultEvent.Raw {
        state: "REJECTED";
    }
}
