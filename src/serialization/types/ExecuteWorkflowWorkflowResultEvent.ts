/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { FulfilledExecuteWorkflowWorkflowResultEvent } from "./FulfilledExecuteWorkflowWorkflowResultEvent";
import { RejectedExecuteWorkflowWorkflowResultEvent } from "./RejectedExecuteWorkflowWorkflowResultEvent";

export const ExecuteWorkflowWorkflowResultEvent: core.serialization.Schema<
    serializers.ExecuteWorkflowWorkflowResultEvent.Raw,
    Vellum.ExecuteWorkflowWorkflowResultEvent
> = core.serialization
    .union("state", {
        FULFILLED: FulfilledExecuteWorkflowWorkflowResultEvent,
        REJECTED: RejectedExecuteWorkflowWorkflowResultEvent,
    })
    .transform<Vellum.ExecuteWorkflowWorkflowResultEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ExecuteWorkflowWorkflowResultEvent {
    type Raw = ExecuteWorkflowWorkflowResultEvent.Fulfilled | ExecuteWorkflowWorkflowResultEvent.Rejected;

    interface Fulfilled extends FulfilledExecuteWorkflowWorkflowResultEvent.Raw {
        state: "FULFILLED";
    }

    interface Rejected extends RejectedExecuteWorkflowWorkflowResultEvent.Raw {
        state: "REJECTED";
    }
}
