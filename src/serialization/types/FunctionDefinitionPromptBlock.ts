/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { PromptBlockState } from "./PromptBlockState";
import { EphemeralPromptCacheConfig } from "./EphemeralPromptCacheConfig";

export const FunctionDefinitionPromptBlock: core.serialization.ObjectSchema<
    serializers.FunctionDefinitionPromptBlock.Raw,
    Vellum.FunctionDefinitionPromptBlock
> = core.serialization.object({
    state: PromptBlockState.optional(),
    cacheConfig: core.serialization.property("cache_config", EphemeralPromptCacheConfig.optional()),
    blockType: core.serialization.property("block_type", core.serialization.stringLiteral("FUNCTION_DEFINITION")),
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    parameters: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    forced: core.serialization.boolean().optional(),
    strict: core.serialization.boolean().optional(),
});

export declare namespace FunctionDefinitionPromptBlock {
    interface Raw {
        state?: PromptBlockState.Raw | null;
        cache_config?: EphemeralPromptCacheConfig.Raw | null;
        block_type: "FUNCTION_DEFINITION";
        name?: string | null;
        description?: string | null;
        parameters?: Record<string, unknown> | null;
        forced?: boolean | null;
        strict?: boolean | null;
    }
}
