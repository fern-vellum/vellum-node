/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { ReductoChunkingRequest } from "./ReductoChunkingRequest";
import { SentenceChunkingRequest } from "./SentenceChunkingRequest";
import { TokenOverlappingWindowChunkingRequest } from "./TokenOverlappingWindowChunkingRequest";

export const DocumentIndexChunkingRequest: core.serialization.Schema<
    serializers.DocumentIndexChunkingRequest.Raw,
    Vellum.DocumentIndexChunkingRequest
> = core.serialization
    .union(core.serialization.discriminant("chunkerName", "chunker_name"), {
        "reducto-chunker": ReductoChunkingRequest,
        "sentence-chunker": SentenceChunkingRequest,
        "token-overlapping-window-chunker": TokenOverlappingWindowChunkingRequest,
    })
    .transform<Vellum.DocumentIndexChunkingRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace DocumentIndexChunkingRequest {
    type Raw =
        | DocumentIndexChunkingRequest.ReductoChunker
        | DocumentIndexChunkingRequest.SentenceChunker
        | DocumentIndexChunkingRequest.TokenOverlappingWindowChunker;

    interface ReductoChunker extends ReductoChunkingRequest.Raw {
        chunker_name: "reducto-chunker";
    }

    interface SentenceChunker extends SentenceChunkingRequest.Raw {
        chunker_name: "sentence-chunker";
    }

    interface TokenOverlappingWindowChunker extends TokenOverlappingWindowChunkingRequest.Raw {
        chunker_name: "token-overlapping-window-chunker";
    }
}
