/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";
import { WorkflowExecutionWorkflowResultEvent } from "./WorkflowExecutionWorkflowResultEvent";
import { WorkflowExecutionNodeResultEvent } from "./WorkflowExecutionNodeResultEvent";

export const WorkflowStreamEvent: core.serialization.Schema<
    serializers.WorkflowStreamEvent.Raw,
    Vellum.WorkflowStreamEvent
> = core.serialization
    .union("type", {
        WORKFLOW: WorkflowExecutionWorkflowResultEvent,
        NODE: WorkflowExecutionNodeResultEvent,
    })
    .transform<Vellum.WorkflowStreamEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowStreamEvent {
    type Raw = WorkflowStreamEvent.Workflow | WorkflowStreamEvent.Node;

    interface Workflow extends WorkflowExecutionWorkflowResultEvent.Raw {
        type: "WORKFLOW";
    }

    interface Node extends WorkflowExecutionNodeResultEvent.Raw {
        type: "NODE";
    }
}
