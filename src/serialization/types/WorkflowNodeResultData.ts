/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { PromptNodeResult } from "./PromptNodeResult";
import { SearchNodeResult } from "./SearchNodeResult";
import { TemplatingNodeResult } from "./TemplatingNodeResult";
import { CodeExecutionNodeResult } from "./CodeExecutionNodeResult";
import { ConditionalNodeResult } from "./ConditionalNodeResult";
import { ApiNodeResult } from "./ApiNodeResult";
import { TerminalNodeResult } from "./TerminalNodeResult";
import { MergeNodeResult } from "./MergeNodeResult";
import { SubworkflowNodeResult } from "./SubworkflowNodeResult";
import { MetricNodeResult } from "./MetricNodeResult";

export const WorkflowNodeResultData: core.serialization.Schema<
    serializers.WorkflowNodeResultData.Raw,
    Vellum.WorkflowNodeResultData
> = core.serialization
    .union("type", {
        PROMPT: PromptNodeResult,
        SEARCH: SearchNodeResult,
        TEMPLATING: TemplatingNodeResult,
        CODE_EXECUTION: CodeExecutionNodeResult,
        CONDITIONAL: ConditionalNodeResult,
        API: ApiNodeResult,
        TERMINAL: TerminalNodeResult,
        MERGE: MergeNodeResult,
        SUBWORKFLOW: SubworkflowNodeResult,
        METRIC: MetricNodeResult,
    })
    .transform<Vellum.WorkflowNodeResultData>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowNodeResultData {
    type Raw =
        | WorkflowNodeResultData.Prompt
        | WorkflowNodeResultData.Search
        | WorkflowNodeResultData.Templating
        | WorkflowNodeResultData.CodeExecution
        | WorkflowNodeResultData.Conditional
        | WorkflowNodeResultData.Api
        | WorkflowNodeResultData.Terminal
        | WorkflowNodeResultData.Merge
        | WorkflowNodeResultData.Subworkflow
        | WorkflowNodeResultData.Metric;

    interface Prompt extends PromptNodeResult.Raw {
        type: "PROMPT";
    }

    interface Search extends SearchNodeResult.Raw {
        type: "SEARCH";
    }

    interface Templating extends TemplatingNodeResult.Raw {
        type: "TEMPLATING";
    }

    interface CodeExecution extends CodeExecutionNodeResult.Raw {
        type: "CODE_EXECUTION";
    }

    interface Conditional extends ConditionalNodeResult.Raw {
        type: "CONDITIONAL";
    }

    interface Api extends ApiNodeResult.Raw {
        type: "API";
    }

    interface Terminal extends TerminalNodeResult.Raw {
        type: "TERMINAL";
    }

    interface Merge extends MergeNodeResult.Raw {
        type: "MERGE";
    }

    interface Subworkflow extends SubworkflowNodeResult.Raw {
        type: "SUBWORKFLOW";
    }

    interface Metric extends MetricNodeResult.Raw {
        type: "METRIC";
    }
}
