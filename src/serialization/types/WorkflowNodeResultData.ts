/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const WorkflowNodeResultData: core.serialization.Schema<
    serializers.WorkflowNodeResultData.Raw,
    Vellum.WorkflowNodeResultData
> = core.serialization
    .union("type", {
        PROMPT: core.serialization.lazyObject(async () => (await import("..")).PromptNodeResult),
        SEARCH: core.serialization.lazyObject(async () => (await import("..")).SearchNodeResult),
        TEMPLATING: core.serialization.lazyObject(async () => (await import("..")).TemplatingNodeResult),
        CODE_EXECUTION: core.serialization.lazyObject(async () => (await import("..")).CodeExecutionNodeResult),
        CONDITIONAL: core.serialization.lazyObject(async () => (await import("..")).ConditionalNodeResult),
        API: core.serialization.lazyObject(async () => (await import("..")).ApiNodeResult),
        TERMINAL: core.serialization.lazyObject(async () => (await import("..")).TerminalNodeResult),
        SUBWORKFLOW: core.serialization.lazyObject(async () => (await import("..")).SubworkflowNodeResult),
    })
    .transform<Vellum.WorkflowNodeResultData>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowNodeResultData {
    type Raw =
        | WorkflowNodeResultData.Prompt
        | WorkflowNodeResultData.Search
        | WorkflowNodeResultData.Templating
        | WorkflowNodeResultData.CodeExecution
        | WorkflowNodeResultData.Conditional
        | WorkflowNodeResultData.Api
        | WorkflowNodeResultData.Terminal
        | WorkflowNodeResultData.Subworkflow;

    interface Prompt extends serializers.PromptNodeResult.Raw {
        type: "PROMPT";
    }

    interface Search extends serializers.SearchNodeResult.Raw {
        type: "SEARCH";
    }

    interface Templating extends serializers.TemplatingNodeResult.Raw {
        type: "TEMPLATING";
    }

    interface CodeExecution extends serializers.CodeExecutionNodeResult.Raw {
        type: "CODE_EXECUTION";
    }

    interface Conditional extends serializers.ConditionalNodeResult.Raw {
        type: "CONDITIONAL";
    }

    interface Api extends serializers.ApiNodeResult.Raw {
        type: "API";
    }

    interface Terminal extends serializers.TerminalNodeResult.Raw {
        type: "TERMINAL";
    }

    interface Subworkflow extends serializers.SubworkflowNodeResult.Raw {
        type: "SUBWORKFLOW";
    }
}
