/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const TestSuiteRunRead: core.serialization.ObjectSchema<
    serializers.TestSuiteRunRead.Raw,
    Vellum.TestSuiteRunRead
> = core.serialization.object({
    id: core.serialization.string(),
    created: core.serialization.date(),
    testSuite: core.serialization.property(
        "test_suite",
        core.serialization.lazyObject(async () => (await import("..")).TestSuiteRunTestSuite)
    ),
    state: core.serialization.lazy(async () => (await import("..")).TestSuiteRunState).optional(),
    execConfig: core.serialization.property(
        "exec_config",
        core.serialization.lazy(async () => (await import("..")).TestSuiteRunExecConfig).optional()
    ),
});

export declare namespace TestSuiteRunRead {
    interface Raw {
        id: string;
        created: string;
        test_suite: serializers.TestSuiteRunTestSuite.Raw;
        state?: serializers.TestSuiteRunState.Raw | null;
        exec_config?: serializers.TestSuiteRunExecConfig.Raw | null;
    }
}
