/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";
import { StringChatMessageContent } from "./StringChatMessageContent";
import { FunctionCallChatMessageContent } from "./FunctionCallChatMessageContent";
import { ArrayChatMessageContent } from "./ArrayChatMessageContent";
import { ImageChatMessageContent } from "./ImageChatMessageContent";

export const ChatMessageContent: core.serialization.Schema<
    serializers.ChatMessageContent.Raw,
    Vellum.ChatMessageContent
> = core.serialization
    .union("type", {
        STRING: StringChatMessageContent,
        FUNCTION_CALL: FunctionCallChatMessageContent,
        ARRAY: ArrayChatMessageContent,
        IMAGE: ImageChatMessageContent,
    })
    .transform<Vellum.ChatMessageContent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ChatMessageContent {
    type Raw =
        | ChatMessageContent.String
        | ChatMessageContent.FunctionCall
        | ChatMessageContent.Array
        | ChatMessageContent.Image;

    interface String extends StringChatMessageContent.Raw {
        type: "STRING";
    }

    interface FunctionCall extends FunctionCallChatMessageContent.Raw {
        type: "FUNCTION_CALL";
    }

    interface Array extends ArrayChatMessageContent.Raw {
        type: "ARRAY";
    }

    interface Image extends ImageChatMessageContent.Raw {
        type: "IMAGE";
    }
}
