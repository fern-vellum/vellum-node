/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const WorkflowResultEvent: core.serialization.ObjectSchema<
    serializers.WorkflowResultEvent.Raw,
    Vellum.WorkflowResultEvent
> = core.serialization.object({
    id: core.serialization.string(),
    state: core.serialization.lazy(async () => (await import("..")).WorkflowNodeResultEventState),
    ts: core.serialization.date(),
    output: core.serialization.lazy(async () => (await import("..")).WorkflowResultEventOutputData).optional(),
    error: core.serialization.lazyObject(async () => (await import("..")).WorkflowEventError).optional(),
    outputs: core.serialization
        .list(core.serialization.lazy(async () => (await import("..")).WorkflowOutput))
        .optional(),
    inputs: core.serialization
        .list(core.serialization.lazy(async () => (await import("..")).ExecutionVellumValue))
        .optional(),
});

export declare namespace WorkflowResultEvent {
    interface Raw {
        id: string;
        state: serializers.WorkflowNodeResultEventState.Raw;
        ts: string;
        output?: serializers.WorkflowResultEventOutputData.Raw | null;
        error?: serializers.WorkflowEventError.Raw | null;
        outputs?: serializers.WorkflowOutput.Raw[] | null;
        inputs?: serializers.ExecutionVellumValue.Raw[] | null;
    }
}
