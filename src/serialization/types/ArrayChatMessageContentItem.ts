/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const ArrayChatMessageContentItem: core.serialization.Schema<
    serializers.ArrayChatMessageContentItem.Raw,
    Vellum.ArrayChatMessageContentItem
> = core.serialization
    .union("type", {
        STRING: core.serialization.lazyObject(async () => (await import("..")).StringChatMessageContent),
        FUNCTION_CALL: core.serialization.lazyObject(async () => (await import("..")).FunctionCallChatMessageContent),
        IMAGE: core.serialization.lazyObject(async () => (await import("..")).ImageChatMessageContent),
    })
    .transform<Vellum.ArrayChatMessageContentItem>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ArrayChatMessageContentItem {
    type Raw =
        | ArrayChatMessageContentItem.String
        | ArrayChatMessageContentItem.FunctionCall
        | ArrayChatMessageContentItem.Image;

    interface String extends serializers.StringChatMessageContent.Raw {
        type: "STRING";
    }

    interface FunctionCall extends serializers.FunctionCallChatMessageContent.Raw {
        type: "FUNCTION_CALL";
    }

    interface Image extends serializers.ImageChatMessageContent.Raw {
        type: "IMAGE";
    }
}
