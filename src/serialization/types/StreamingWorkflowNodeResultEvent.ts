/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";
import { WorkflowNodeResultData } from "./WorkflowNodeResultData";
import { NodeOutputCompiledValue } from "./NodeOutputCompiledValue";

export const StreamingWorkflowNodeResultEvent: core.serialization.ObjectSchema<
    serializers.StreamingWorkflowNodeResultEvent.Raw,
    Vellum.StreamingWorkflowNodeResultEvent
> = core.serialization.object({
    id: core.serialization.string(),
    nodeId: core.serialization.property("node_id", core.serialization.string()),
    nodeResultId: core.serialization.property("node_result_id", core.serialization.string()),
    ts: core.serialization.date().optional(),
    data: WorkflowNodeResultData.optional(),
    sourceExecutionId: core.serialization.property("source_execution_id", core.serialization.string().optional()),
    output: NodeOutputCompiledValue.optional(),
    outputIndex: core.serialization.property("output_index", core.serialization.number().optional()),
});

export declare namespace StreamingWorkflowNodeResultEvent {
    interface Raw {
        id: string;
        node_id: string;
        node_result_id: string;
        ts?: string | null;
        data?: WorkflowNodeResultData.Raw | null;
        source_execution_id?: string | null;
        output?: NodeOutputCompiledValue.Raw | null;
        output_index?: number | null;
    }
}
