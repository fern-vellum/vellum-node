/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const ExecutePromptEvent: core.serialization.Schema<
    serializers.ExecutePromptEvent.Raw,
    Vellum.ExecutePromptEvent
> = core.serialization
    .union("state", {
        INITIATED: core.serialization.lazyObject(async () => (await import("..")).InitiatedExecutePromptEvent),
        STREAMING: core.serialization.lazyObject(async () => (await import("..")).StreamingExecutePromptEvent),
        FULFILLED: core.serialization.lazyObject(async () => (await import("..")).FulfilledExecutePromptEvent),
        REJECTED: core.serialization.lazyObject(async () => (await import("..")).RejectedExecutePromptEvent),
    })
    .transform<Vellum.ExecutePromptEvent>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ExecutePromptEvent {
    type Raw =
        | ExecutePromptEvent.Initiated
        | ExecutePromptEvent.Streaming
        | ExecutePromptEvent.Fulfilled
        | ExecutePromptEvent.Rejected;

    interface Initiated extends serializers.InitiatedExecutePromptEvent.Raw {
        state: "INITIATED";
    }

    interface Streaming extends serializers.StreamingExecutePromptEvent.Raw {
        state: "STREAMING";
    }

    interface Fulfilled extends serializers.FulfilledExecutePromptEvent.Raw {
        state: "FULFILLED";
    }

    interface Rejected extends serializers.RejectedExecutePromptEvent.Raw {
        state: "REJECTED";
    }
}
