/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";
import { CodeExecutionNodeStringResult } from "./CodeExecutionNodeStringResult";
import { CodeExecutionNodeNumberResult } from "./CodeExecutionNodeNumberResult";
import { CodeExecutionNodeJsonResult } from "./CodeExecutionNodeJsonResult";
import { CodeExecutionNodeChatHistoryResult } from "./CodeExecutionNodeChatHistoryResult";
import { CodeExecutionNodeSearchResultsResult } from "./CodeExecutionNodeSearchResultsResult";
import { CodeExecutionNodeErrorResult } from "./CodeExecutionNodeErrorResult";
import { CodeExecutionNodeArrayResult } from "./CodeExecutionNodeArrayResult";
import { CodeExecutionNodeFunctionCallResult } from "./CodeExecutionNodeFunctionCallResult";

export const CodeExecutionNodeResultOutput: core.serialization.Schema<
    serializers.CodeExecutionNodeResultOutput.Raw,
    Vellum.CodeExecutionNodeResultOutput
> = core.serialization
    .union("type", {
        STRING: CodeExecutionNodeStringResult,
        NUMBER: CodeExecutionNodeNumberResult,
        JSON: CodeExecutionNodeJsonResult,
        CHAT_HISTORY: CodeExecutionNodeChatHistoryResult,
        SEARCH_RESULTS: CodeExecutionNodeSearchResultsResult,
        ERROR: CodeExecutionNodeErrorResult,
        ARRAY: CodeExecutionNodeArrayResult,
        FUNCTION_CALL: CodeExecutionNodeFunctionCallResult,
    })
    .transform<Vellum.CodeExecutionNodeResultOutput>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace CodeExecutionNodeResultOutput {
    type Raw =
        | CodeExecutionNodeResultOutput.String
        | CodeExecutionNodeResultOutput.Number
        | CodeExecutionNodeResultOutput.Json
        | CodeExecutionNodeResultOutput.ChatHistory
        | CodeExecutionNodeResultOutput.SearchResults
        | CodeExecutionNodeResultOutput.Error
        | CodeExecutionNodeResultOutput.Array
        | CodeExecutionNodeResultOutput.FunctionCall;

    interface String extends CodeExecutionNodeStringResult.Raw {
        type: "STRING";
    }

    interface Number extends CodeExecutionNodeNumberResult.Raw {
        type: "NUMBER";
    }

    interface Json extends CodeExecutionNodeJsonResult.Raw {
        type: "JSON";
    }

    interface ChatHistory extends CodeExecutionNodeChatHistoryResult.Raw {
        type: "CHAT_HISTORY";
    }

    interface SearchResults extends CodeExecutionNodeSearchResultsResult.Raw {
        type: "SEARCH_RESULTS";
    }

    interface Error extends CodeExecutionNodeErrorResult.Raw {
        type: "ERROR";
    }

    interface Array extends CodeExecutionNodeArrayResult.Raw {
        type: "ARRAY";
    }

    interface FunctionCall extends CodeExecutionNodeFunctionCallResult.Raw {
        type: "FUNCTION_CALL";
    }
}
