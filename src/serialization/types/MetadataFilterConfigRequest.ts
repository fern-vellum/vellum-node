/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { MetadataFilterRuleCombinator } from "./MetadataFilterRuleCombinator";
import { LogicalOperator } from "./LogicalOperator";

export const MetadataFilterConfigRequest: core.serialization.ObjectSchema<
    serializers.MetadataFilterConfigRequest.Raw,
    Vellum.MetadataFilterConfigRequest
> = core.serialization.object({
    combinator: MetadataFilterRuleCombinator.optional(),
    negated: core.serialization.boolean().optional(),
    rules: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).MetadataFilterRuleRequest))
        .optional(),
    field: core.serialization.string().optional(),
    operator: LogicalOperator.optional(),
    value: core.serialization.string().optional(),
});

export declare namespace MetadataFilterConfigRequest {
    interface Raw {
        combinator?: MetadataFilterRuleCombinator.Raw | null;
        negated?: boolean | null;
        rules?: serializers.MetadataFilterRuleRequest.Raw[] | null;
        field?: string | null;
        operator?: LogicalOperator.Raw | null;
        value?: string | null;
    }
}
