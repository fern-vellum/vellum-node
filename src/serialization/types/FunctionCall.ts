/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const FunctionCall: core.serialization.Schema<serializers.FunctionCall.Raw, Vellum.FunctionCall> =
    core.serialization
        .union("state", {
            FULFILLED: core.serialization.lazyObject(async () => (await import("..")).FulfilledFunctionCall),
            REJECTED: core.serialization.lazyObject(async () => (await import("..")).RejectedFunctionCall),
        })
        .transform<Vellum.FunctionCall>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace FunctionCall {
    type Raw = FunctionCall.Fulfilled | FunctionCall.Rejected;

    interface Fulfilled extends serializers.FulfilledFunctionCall.Raw {
        state: "FULFILLED";
    }

    interface Rejected extends serializers.RejectedFunctionCall.Raw {
        state: "REJECTED";
    }
}
