/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const ExecutePromptResponse: core.serialization.Schema<
    serializers.ExecutePromptResponse.Raw,
    Vellum.ExecutePromptResponse
> = core.serialization
    .union("type", {
        ERROR: core.serialization.lazyObject(async () => (await import("..")).ErrorExecutePromptResponse),
        JSON: core.serialization.lazyObject(async () => (await import("..")).JsonExecutePromptResponse),
        STRING: core.serialization.lazyObject(async () => (await import("..")).StringExecutePromptResponse),
    })
    .transform<Vellum.ExecutePromptResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ExecutePromptResponse {
    type Raw = ExecutePromptResponse.Error | ExecutePromptResponse.Json | ExecutePromptResponse.String;

    interface Error extends serializers.ErrorExecutePromptResponse.Raw {
        type: "ERROR";
    }

    interface Json extends serializers.JsonExecutePromptResponse.Raw {
        type: "JSON";
    }

    interface String extends serializers.StringExecutePromptResponse.Raw {
        type: "STRING";
    }
}
