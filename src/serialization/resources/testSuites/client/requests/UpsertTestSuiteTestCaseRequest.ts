/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Vellum from "../../../../../api";
import * as core from "../../../../../core";

export const UpsertTestSuiteTestCaseRequest: core.serialization.Schema<
    serializers.UpsertTestSuiteTestCaseRequest.Raw,
    Vellum.UpsertTestSuiteTestCaseRequest
> = core.serialization.object({
    upsertTestSuiteTestCaseRequestId: core.serialization.property("id", core.serialization.string().optional()),
    label: core.serialization.string().optional(),
    inputValues: core.serialization.property(
        "input_values",
        core.serialization.list(
            core.serialization.lazy(async () => (await import("../../../..")).NamedTestCaseVariableValueRequest)
        )
    ),
    evaluationValues: core.serialization.property(
        "evaluation_values",
        core.serialization.list(
            core.serialization.lazy(async () => (await import("../../../..")).NamedTestCaseVariableValueRequest)
        )
    ),
});

export declare namespace UpsertTestSuiteTestCaseRequest {
    interface Raw {
        id?: string | null;
        label?: string | null;
        input_values: serializers.NamedTestCaseVariableValueRequest.Raw[];
        evaluation_values: serializers.NamedTestCaseVariableValueRequest.Raw[];
    }
}
